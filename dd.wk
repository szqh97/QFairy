# QVOD Windows下载服务开发设计文档 #

# 版本 #
|| 版本 || 作者 || 审核 || 日期 || 备注 ||
|| 0.9 || li_yun ||  || 2014-02-18 || 初始化 ||


## QVOD调研文档 ## 

 http://seals.vobile.cn/trac/taisan/wiki/QVOD



## 运行环境 ##
 * 前期测试环境 windows xp 32bit
 * 运行环境： windows 7 32bit (安装在debian6的virtual box上) 

# 设计 #

## 结构定义 ##

 * Crawler提交QVOD的url形成一个任务，得到一个任务创建是否成功的返回结果
 * Crawler提交任务成功后，可以根据hashid查询任务执行的结果, 正在下载则返回pending，下载完毕则返回DownloadSuccess
 
{{{
#!PlantUML
@startuml
Crawler -> qvod_server: POST URL
qvod_server -> qvod_downloader : ADD TASK
Crawler -> qvod_server : CHECK FILE STATE
qvod_server -> Crawler: DOWNLOAD url
Crawler ->qvod_server: DELETE FILES
@enduml
}}}

## 流程 ##

### 任务提交POST ###

#### 流程入口和描述 ####

 * 入口：Crawler post数据，参数是json串
   
#### 主流程 ####

 * 输入：QVOD url(包含文件hashid)
 * 处理过程：
   1. 启动调用QVOD_downloader
   1. 检测任务返回值
   1. 返回结果
 * 输出: 正确信息/错误信息
### 任务状态获取GET ###

#### 流程入口和描述 ####

 * 入口：Crawler post数据，（url数据）
   
#### 主流程 ####

 * 输入：QVOD url
 * 处理过程：
   1. 提取参数对应的文件名称
   1. 下路查询文件是否下载完毕
   1. 返回结果（正在下载则报In Progress／下载完毕Download Success）
 * 输出: 正在下载/下载完毕


### 任务结果获取GET ###

#### 流程入口和描述 ####

 * 入口： Get参数 文件hashid
   
#### 主流程 ####

 * 输入：文件hashid
 * 处理过程：
   1. 根据hashid查找文件存储地址
   1. 读取文件
 * 输出: 视频文件

### Crawler DI文件下载 ###

#### 流程入口和描述 ####

 * 入口： QVOD url,DI处理时调用
   
#### 主流程 ####

 * 输入：url
 * 处理过程：
   1. POST 任务（url）
   1. 查询任务执行结果(10分钟一次（可配置），直到成功为止(超时时间为24小时（可配置），报错))
   1. 下载视频文件
 * 输出: 视频文件

### Windows Server服务 ###

#### 流程入口和描述 ####

 * 描述: 负责初始化DB及QVOD_downloader参数，

#### 主流程 ####

 * 输入：配置文件
 * 处理过程：
   1. 读取配置文件
   1. 初始化DB及QVOD_downloader配置文件参数
   1. 最大任务数量
   1. 检测任务数量（一段时间内杀掉进程，启动QVOD_downloader）
   1. 更新任务状态，下载完毕后更新DB(sqlite)
 * 输出: 无

#### downloader 下载 ####
 * 参数： QVODurl， filename、
 * 流程： 
   1. 参数校验
   1. Qvod安装文件 QVODSetup.exe 重命名为 filename_hashcode.exe
   1. 执行filename_hashcode.exe 开始下载
   1. 更新DB
 * 结果：
   1. 得到 filename

#### 删除已经下载的文件 ####
 * 参数: HTTP POST 
 * 流程： 
   1. 删掉已下载的文件，（如果没有下载完成，会停掉downloader,删掉临时文件）
   2. 删掉DB中的数据

# 接口 #

## 任务提交  ##

 * 下载任务提交：POST /submit_task
 * 参数列表：
   1. url_list
   1. 验证参数(待定)
{{{
{
"token":"info",
"qvod_urls": ["qvod://371089234|439621C574F24937C49B3B9ECA109083DE9616A8|xx06.qmv|", "qvod://809404126|1F58E66C2903EFB65EDEF2CE5529678AE2A457FD|ss_HD_1996.rmvb|"]
}
}}}

 * 结果格式 
{{{

{
  "ErrorCode": 0,
  "ErrorMessage": "success" #[0: success, -1: server error, 1000: input error]
}

}}}

## 结果查询  ##

 * 下载任务提交：GET /query_task/?options=values
 * 参数列表：
   1. url/hashid
   1. 验证参数(待定)

 * 结果格式 
{{{

{
"ErrorCode": 0 #1, 0, -1, 1000,
"ErrorMessage": "download success" #1: in progress, 0: download success, -1: server error, 100:input_error
"DownloadURL": "http://192.168.1.120/qvoddown/About_time.rmvb"
}

}}}

   
## 下载后删除文件 ##
 * 删除文件： POST /deletefiles
 * 参数列表：
   1. hasid list
   1. 验证参数（待定）
{{{
{
 "token": "info",
 "hashid_list": ["56C3448D9FD6D04A8535D5B53DD46A3A482A175E", ]
}
}}}
 * 结果： 
   1. 删除 hashid list中的任务
{{{
{
   "ErrorCode": 0,
   "ErrorMessage": "success"
}
}}}
# 新增配置项 #

## Crawler新增配置项 ##

 * QVOD_server:(QVOD windows下载服务器地址)

## Windows Server新增配置项 ##

 * CONCUR_NUM : QVOD 并发数量
 * VIDEO_PATH : QVOD 文件下载存储地址
 * CACHE_PATH : QVOD 缓存文件地址
 * TIMEOUT : QVOD 下载超时时间
 * QVOD_DB : QVOD 的DB（sqlite3)文件


# DB设计 #

 采用sqlite数据库，存储下载地址，记录任务状态

{{{
#!sql
drop table if exists qvod_tasks;
create table qvod_tasks
(
    id              int(10) unsigned  not null AUTO_INCREMENT,
    qvod_url        varchar(1024) not null,
    hash_code       varchar(512) not null,
    created_at      timestamp not null default '0000-00-00 00:00:00',
    updated_at      timestamp not null default '0000-00-00 00:00:00',
    download_url    varchar(1024),
    filename        varchar(1024),
    status          enum('initialized', 'error', 'processing', 'succeed') not null default 'initialized',
    primary key (id)
)
ENGINE=InnoDB DEFAULT CHARSET=utf8;

}}}
}}}
}}}
